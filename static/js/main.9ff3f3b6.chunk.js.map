{"version":3,"sources":["features/poll/pollSlice.js","features/poll/poll-creation/AddAnswerForm.js","features/poll/poll-creation/PollAnswer.js","features/poll/poll-creation/PollCreation.js","features/poll/poll-voting/PollVoting.js","features/poll/poll-chart/pollChart.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["initialState","pollName","answers","id","answer","vote","pollSlice","createSlice","name","reducers","nameEdited","state","action","payload","answerAdded","length","push","answerEdited","arrayIndex","findIndex","copyOfAnswers","value","answerRemoved","filter","answerVoted","reset","actions","selectPollName","poll","selectPollAnswers","AddAnswerForm","useState","setAnswer","pollAnswers","useSelector","dispatch","useDispatch","rows","cols","wrap","placeholder","onChange","e","target","type","onClick","nanoid","disabled","PollAnswer","onValueChanged","renderPollAnswer","map","maxLength","PollCreation","className","aria-label","title","PollVoting","selectedOption","setSelectedOption","onRadioChange","renderPollOptions","option","checked","htmlFor","onSubmit","preventDefault","PollChart","chartHeight","Math","max","el","total","reduce","accumulator","currentValue","data","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data-testid","options","legend","display","plugins","datalabels","anchor","align","ctx","formatter","dataset","dataIndex","scales","yAxes","ticks","beginAtZero","min","stepSize","gridLines","scaleLabel","maintainAspectRatio","App","configureStore","reducer","pollReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ff3f3b6.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const initialState = {\r\n    pollName: \"\",\r\n    answers: [\r\n        { id: \"0\", answer: \"first answer\", vote: 0 },\r\n        { id: \"1\", answer: \"second answer\", vote: 0 },\r\n    ]\r\n}\r\n\r\nexport const pollSlice = createSlice({\r\n    name: \"poll\",\r\n    initialState,\r\n    reducers: {\r\n        nameEdited: (state, action) => {\r\n            return { ...state, pollName: action.payload }\r\n        },\r\n        answerAdded: (state, action) => {\r\n            if(state.answers.length < 10) {\r\n                state.answers.push(action.payload)\r\n            }\r\n        },\r\n        answerEdited: (state, action) => {\r\n            const arrayIndex = state.answers.findIndex(answer => answer.id === action.payload.id);\r\n            let copyOfAnswers = [...state.answers];\r\n            copyOfAnswers[arrayIndex] = {...copyOfAnswers[arrayIndex], answer: action.payload.value}\r\n            return {...state, answers: copyOfAnswers}\r\n        },\r\n        answerRemoved: (state, action) => {\r\n            return {...state, answers: state.answers.filter(answer => answer.id !== action.payload)}\r\n        },\r\n        answerVoted: (state, action) => {\r\n            const arrayIndex = state.answers.findIndex(answer => answer.id === action.payload);\r\n            state.answers[arrayIndex].vote += 1;\r\n        },\r\n        reset : (state, action) => {\r\n            return initialState\r\n        }\r\n    }\r\n})\r\n\r\nexport const {nameEdited, answerAdded, answerEdited, answerRemoved, answerVoted, reset} = pollSlice.actions;\r\n\r\nexport const selectPollName = state => state.poll.pollName;\r\nexport const selectPollAnswers = state => state.poll.answers;\r\n\r\nexport default pollSlice.reducer;","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\nimport { answerAdded, selectPollAnswers } from '../pollSlice'\r\n\r\nexport const AddAnswerForm = () => {\r\n    const [answer, setAnswer] = useState('')\r\n    const pollAnswers = useSelector(selectPollAnswers);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onAnswerChanged = e => setAnswer(e.target.value)\r\n\r\n    const onSaveAnswerClicked = () => {\r\n        if (answer) {\r\n            dispatch(\r\n                answerAdded({\r\n                    id: nanoid(),\r\n                    answer: answer,\r\n                    vote: 0\r\n                })\r\n            )\r\n            setAnswer('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <form>\r\n                <textarea\r\n                    id=\"answerTitle\"\r\n                    name=\"answerTitle\"\r\n                    rows=\"14\" cols=\"10\" wrap=\"soft\"\r\n                    value={answer}\r\n                    placeholder=\"Type an answer\"\r\n                    onChange={onAnswerChanged}\r\n                />\r\n                <button type=\"button\" onClick={onSaveAnswerClicked} disabled={pollAnswers.length < 10 ? false : true}  >Add</button>\r\n            </form>\r\n        </section>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { answerEdited, answerRemoved, selectPollAnswers } from '../pollSlice';\r\nimport { useDispatch } from 'react-redux'\r\n\r\nexport function PollAnswer() {\r\n    const dispatch = useDispatch();\r\n    const pollAnswers = useSelector(selectPollAnswers);\r\n\r\n    const onValueChanged = e => {\r\n        dispatch(answerEdited({ id: e.target.id, value: e.target.value }))\r\n    }\r\n\r\n    const onRemoveQuestionClicked = (id) => {\r\n        dispatch(\r\n            answerRemoved(id)\r\n        )\r\n    }\r\n\r\n    const renderPollAnswer = pollAnswers.map(answer => (\r\n        <div key={answer.id}>\r\n            <textarea rows=\"14\" cols=\"10\" wrap=\"soft\" value={answer.answer} maxLength=\"80\" onChange={onValueChanged} id={answer.id} />\r\n            <button onClick={() => onRemoveQuestionClicked(answer.id)} disabled={pollAnswers.length < 3 ? true : false}>X</button>\r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            {renderPollAnswer}\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { nameEdited, reset, selectPollName, selectPollAnswers } from '../pollSlice';\r\nimport { useDispatch } from 'react-redux'\r\nimport { AddAnswerForm } from './AddAnswerForm'\r\nimport { PollAnswer } from './PollAnswer'\r\n\r\nexport function PollCreation() {\r\n    const dispatch = useDispatch();\r\n    const pollName = useSelector(selectPollName);\r\n    const pollAnswers = useSelector(selectPollAnswers);\r\n\r\n    const onNameChanged = e => {\r\n        dispatch(nameEdited(e.target.value))\r\n    }\r\n\r\n    const onResetClicked = () => {\r\n        dispatch(reset())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"padded-input\">\r\n                <textarea rows=\"14\" cols=\"10\" wrap=\"soft\" maxLength=\"80\" placeholder=\"name your poll\" value={pollName} onChange={onNameChanged} aria-label=\"poll-name\" />\r\n            </div>\r\n\r\n            <PollAnswer />\r\n\r\n            <AddAnswerForm />\r\n\r\n            <div className=\"bottom-col1\">\r\n                <p>{pollAnswers.length}/10 possible answers</p>\r\n                <button title=\"reset\" onClick={onResetClicked}>Reset</button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { answerVoted, selectPollName, selectPollAnswers } from '../pollSlice';\r\nimport { useDispatch } from 'react-redux'\r\n\r\nexport function PollVoting() {\r\n    const [selectedOption, setSelectedOption] = useState('')\r\n    const dispatch = useDispatch();\r\n    const pollName = useSelector(selectPollName);\r\n    const pollAnswers = useSelector(selectPollAnswers);\r\n\r\n    const onRadioChange = e => {\r\n        setSelectedOption(e.target.value)\r\n    }\r\n\r\n    const onFormSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch(answerVoted(selectedOption))\r\n    }\r\n\r\n    const renderPollOptions = pollAnswers.map(option => (\r\n        <div key={option.id} className=\"radio-margin\">\r\n            <input type=\"radio\" className=\"radio-input\" id={`radioId${option.id}`} name={option.answer} value={option.id} checked={selectedOption === option.id} onChange={onRadioChange} />\r\n            <label htmlFor={option.answer}>{option.answer}</label><br />\r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            <div className=\"padded-input\">\r\n                <h2>{pollName}</h2>\r\n            </div>\r\n\r\n            <form onSubmit={onFormSubmit} className=\"poll-form\">\r\n                <div>\r\n                    {renderPollOptions}\r\n                </div>\r\n\r\n                <button type=\"submit\">Vote</button>\r\n            </form>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectPollName, selectPollAnswers } from '../pollSlice';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport \"chartjs-plugin-datalabels\";\r\n\r\nexport function PollChart() {\r\n    const pollName = useSelector(selectPollName);\r\n    const pollAnswers = useSelector(selectPollAnswers);\r\n    const chartHeight = Math.max(...pollAnswers.map(el => el.vote)) + 1;\r\n    const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n    const total = pollAnswers.map(el => el.vote).reduce(reducer);\r\n\r\n    const data = {\r\n        labels: pollAnswers.map(el => el.answer),\r\n        datasets: [\r\n            {\r\n                backgroundColor: 'rgba(255,99,132,0.2)',\r\n                borderColor: 'rgba(255,99,132,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                hoverBorderColor: 'rgba(255,99,132,1)',\r\n                data: pollAnswers.map(el => el.vote)\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <div className=\"chart-flex\">\r\n            <div className=\"chart-header\"><h2>{pollName}</h2></div>\r\n\r\n            <div className=\"item\" data-testid=\"bar-chart\">\r\n                <Bar\r\n                    data={data}\r\n                    options={{\r\n                        legend: {\r\n                            display: false\r\n                        },\r\n                        plugins: {\r\n                            datalabels: {\r\n                                anchor: 'end',\r\n                                align: 'top',\r\n                                display: ctx => {\r\n                                    return true;\r\n                                },\r\n                                formatter: (ctx, data) => {\r\n                                    return `${data.dataset.data[data.dataIndex]}`;\r\n                                }\r\n                            }\r\n                        },\r\n                        scales: { yAxes: [{ ticks: { display: false, beginAtZero: true, min: 0, stepSize: 1, max: chartHeight }, gridLines: { display: false } }], scaleLabel: { display: false } },\r\n                        maintainAspectRatio: false\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"chart-footer\"><span data-testid=\"total\">Total votes: {total} </span></div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { PollCreation } from './features/poll/poll-creation/PollCreation'\r\nimport { PollVoting } from './features/poll/poll-voting/PollVoting'\r\nimport { PollChart } from './features/poll/poll-chart/pollChart'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" >\r\n\r\n      <header className=\"App-Header\">\r\n        <h1 className=\"App-Header-Content\" >Sir Vote-a-lot</h1>\r\n      </header>\r\n\r\n      <section className=\"section\">\r\n          <div className=\"col\">\r\n            <PollCreation/>\r\n          </div>\r\n          <div className=\"col\">\r\n            <PollVoting />\r\n          </div>\r\n          <div className=\"col\">\r\n            <PollChart />\r\n          </div>\r\n      </section>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport pollReducer from '../features/poll/pollSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    poll: pollReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}